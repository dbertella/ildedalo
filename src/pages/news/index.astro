---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.jsx';
import BlogList from '../../components/BlogList.jsx';
import Footer from '../../components/Footer.jsx';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { WORDPRESS_API_BASE } from '../../config/wordpress.js';
import { processImagesInContent } from '../../utils/imageUtils.js';

// Define types for WordPress API response
interface WordPressPost {
  id: number;
  slug: string;
  title: { rendered: string };
  excerpt: { rendered: string };
  content: { rendered: string };
  date: string;
  modified: string;
  author: number;
  featured_media: number;
  _embedded?: {
    'wp:featuredmedia'?: Array<{
      id: number;
      source_url: string;
      alt_text: string;
    }>;
  } | null;
}





// Fetch posts from WordPress.com public API
let posts: WordPressPost[] = [];

try {
  const { data: rawPosts } = await axios.get(`${WORDPRESS_API_BASE}/posts`, {
    params: {
      number: 10,
      fields: 'ID,slug,title,excerpt,content,date,modified,author,featured_image'
    }
  });
  
  // Convert WordPress.com API response to our format
  posts = (rawPosts as any).posts.map((post: any) => ({
    id: post.ID,
    slug: post.slug,
    title: {
      rendered: post.title || ''
    },
    excerpt: {
      rendered: post.excerpt || ''
    },
    content: {
      rendered: post.content || ''
    },
    date: post.date,
    modified: post.modified,
    author: post.author?.ID || 1,
    featured_media: post.featured_image ? 1 : 0,
    _embedded: post.featured_image ? {
      'wp:featuredmedia': [{
        id: 1,
        source_url: post.featured_image,
        alt_text: post.title || ''
      }]
    } : null
  }));
  
  console.log(`Successfully fetched ${posts.length} posts from WordPress.com API`);
} catch (error) {
  console.error('Error fetching posts from WordPress.com API:', error);
  console.log('No posts found, redirecting to 404');
  return Astro.redirect('/404');
}

// Process images in all posts
for (const post of posts) {
  if (post.content.rendered) {
    post.content.rendered = await processImagesInContent(post.content.rendered);
  }
  if (post.excerpt.rendered) {
    post.excerpt.rendered = await processImagesInContent(post.excerpt.rendered);
  }
}
---

<Layout title="News - Il Dedalo">
  <Header slot="header" client:load />
  
  <div class="main-content">
    <BlogList posts={posts} title="News" isTaxonomy={false} isAuthor={false} client:load />
  </div>
  
  <Footer slot="footer" />
</Layout> 