---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.jsx';
import Footer from '../components/Footer.jsx';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { WORDPRESS_API_BASE } from '../config/wordpress.js';
import { downloadImage } from '../utils/imageUtils.js';

// Define types for WordPress response
interface WordPressContent {
  ID: number;
  title: string;
  content: string;
  excerpt: string;
  date: string;
  modified: string;
  slug: string;
  featured_image?: string;
  type: 'post' | 'page';
}



let contentData: WordPressContent | null = null;
let localImages: Record<string, string> = {};

try {
  // First try to fetch as a post with slug 'home'
  console.log('Trying to fetch home as post from WordPress.com API');
  const { data: rawPost } = await axios.get(`${WORDPRESS_API_BASE}/posts/slug:home`);
  
  if (rawPost) {
    const post = rawPost as any;
    contentData = {
      ID: post.ID,
      title: post.title || '',
      content: post.content || '',
      excerpt: post.excerpt || '',
      date: post.date,
      modified: post.modified,
      slug: post.slug,
      featured_image: (post.featured_image ?? '') as string,
      type: 'post'
    };
    console.log('Successfully fetched home post from WordPress.com API');
  } else {
    return Astro.redirect('/404');
  }
} catch (postError) {
  console.log('Home post not found, redirecting to 404');
  return Astro.redirect('/404');
}

// Process images if we have content
if (contentData && contentData.content) {
  // Find all image URLs in the content
  const imgRegex = /<img[^>]+src=["']([^"'>]+)["'][^>]*>/g;
  let match;
  let newContent = contentData.content;
  
  while ((match = imgRegex.exec(contentData.content)) !== null) {
    const imgUrl = match[1] as string;
    const imgName = path.basename(imgUrl.split('?')[0]);
    const localPath = path.join(process.cwd(), 'public', imgName);
    const publicPath = `/${imgName}`;
    
    // Download if not already present
    if (!fs.existsSync(localPath)) {
      try {
        await downloadImage(imgUrl, localPath);
        console.log(`Downloaded image: ${imgName}`);
      } catch (e) {
        console.error('Failed to download image:', imgUrl, e);
      }
    }
    
    localImages[imgUrl] = publicPath;
    // Replace src in content
    newContent = newContent.replace(new RegExp(imgUrl, 'g'), publicPath);
  }
  
  contentData.content = newContent;
}
---

<Layout 
  title={contentData?.title || "Il Dedalo ðŸŒ¿ Soul Space"} 
  description={contentData?.excerpt || "Il Dedalo Ã¨ uno spazio per l'anima, la creativitÃ , la cura e la bellezza di condividere."}
  url="https://ildedalo.com"
>
  <Header slot="header" client:load />
  
  <div class="main-content">
    {contentData && (
      <div class="post-content" set:html={contentData.content} />
    )}
  </div>
  
  <Footer slot="footer" />
</Layout>
